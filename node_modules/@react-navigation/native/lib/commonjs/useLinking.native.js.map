{"version":3,"sources":["useLinking.native.tsx"],"names":["isUsingLinking","useLinking","ref","enabled","prefixes","config","getStateFromPath","getStateFromPathDefault","React","useEffect","Error","Platform","OS","enabledRef","useRef","prefixesRef","configRef","getStateFromPathRef","current","extractPathFromURL","useCallback","url","prefix","startsWith","replace","undefined","getInitialState","Promise","race","Linking","getInitialURL","resolve","setTimeout","path","listener","navigation","state","action","dispatch","resetRoot","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport {\n  getActionFromState,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport { LinkingOptions } from './types';\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled,\n    prefixes,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (isUsingLinking) {\n      throw new Error(\n        \"Looks like you are using 'useLinking' in multiple components. This is likely an error since deep links should only be handled in one place to avoid conflicts.\" +\n          (Platform.OS === 'android'\n            ? \"\\n\\nIf you're not using it in multiple components, ensure that you have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple activities which run multiple instances of the root component.\"\n            : '')\n      );\n    } else {\n      isUsingLinking = true;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n  }, [config, enabled, getStateFromPath, prefixes]);\n\n  const extractPathFromURL = React.useCallback((url: string) => {\n    for (const prefix of prefixesRef.current) {\n      if (url.startsWith(prefix)) {\n        return url.replace(prefix, '');\n      }\n    }\n\n    return undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(async () => {\n    if (!enabledRef.current) {\n      return undefined;\n    }\n\n    const url = await (Promise.race([\n      Linking.getInitialURL(),\n      new Promise((resolve) =>\n        // Timeout in 150ms if `getInitialState` doesn't resolve\n        // Workaround for https://github.com/facebook/react-native/issues/25675\n        setTimeout(resolve, 150)\n      ),\n    ]) as Promise<string | null | undefined>);\n\n    const path = url ? extractPathFromURL(url) : null;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, [extractPathFromURL]);\n\n  React.useEffect(() => {\n    const listener = ({ url }: { url: string }) => {\n      if (!enabled) {\n        return;\n      }\n\n      const path = extractPathFromURL(url);\n      const navigation = ref.current;\n\n      if (navigation && path) {\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          if (action !== undefined) {\n            navigation.dispatch(action);\n          } else {\n            navigation.resetRoot(state);\n          }\n        }\n      }\n    };\n\n    Linking.addEventListener('url', listener);\n\n    return () => Linking.removeEventListener('url', listener);\n  }, [enabled, extractPathFromURL, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}